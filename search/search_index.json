{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to AIplay","text":"<p>Explore some of my projects:</p> Screen Project LeRobot Quadruped"},{"location":"about/","title":"About This Site","text":"<p>This little site is a collection of side projects I\u2019ve built during spare moments \u2014 some are for entry-level educational purposes, others are simply driven by curiosity. There\u2019s no grand plan here, but I do intend to keep moving... somewhere. Not necessarily forward, because frankly, there's no clear direction \u2014 just a desire to see where things might lead and what fun discoveries we might uncover along the way.</p> <p>If I were to loosely sketch a plan, it might look like this: start with simple things like blinking LEDs or tiny desk lights, and gradually escalate toward something more... cinematic \u2014 maybe even \u201cTerminator\u201d-grade tech. I\u2019m not promising we\u2019ll ever get there, but I\u2019m pretty sure the journey will be worth it.</p> <p></p>"},{"location":"contact/","title":"Contact","text":"<p>You can reach me at:</p> <ul> <li>GitHub: MiaoReynolds</li> <li>Email: bin.miao@ntu.edu.sg</li> </ul>"},{"location":"extras-contact/","title":"Contact","text":"<p>We welcome contributions, feedback, and collaboration:</p> <ul> <li>Maintainer: Miao</li> <li>GitHub: yourusername</li> <li>Email: yourname@example.com</li> </ul>"},{"location":"extras-faq/","title":"FAQ","text":"<p>Q: Why is my servo vibrating randomly? A: It could be power instability. Try using a 5V 2A power source.</p> <p>Q: The camera doesn't stream. A: Double-check WiFi credentials and pin assignments.</p>"},{"location":"hardware/","title":"Hardware Overview","text":"<ul> <li>6 DOF servo motors</li> <li>ESP32 microcontroller board</li> <li>Power supply module (USB or battery)</li> <li>Optional: OLED display, camera module, joystick, buttons</li> </ul>"},{"location":"software/","title":"Software Architecture","text":"<ul> <li>Control scripts written in Arduino or MicroPython</li> <li>Master-follower arm logic</li> <li>UART and I2C communication for peripheral expansion</li> <li>Video feedback via ESP32-CAM module</li> </ul>"},{"location":"test_index/","title":"Welcome to AIplay","text":"<p>A playground of personal AI, robotics, and microcontroller projects.</p> Start Learning Explore Devices <p> </p>"},{"location":"test_index/#featured-projects","title":"\ud83d\udd25 Featured Projects","text":"<p>The Pomodoro Timer \u2192 \u2014 Tiny productivity gadget with real-time display LeRobot \u2192 \u2014 Educational robotic arm</p>"},{"location":"test_index/#latest-additions","title":"\u2728 Latest Additions","text":"<ul> <li>\ud83c\udd95 May 2025 \u2014 Quadruped Robot AI experiments</li> <li>\ud83c\udd95 April 2025 \u2014 Pomodo Timer</li> </ul>"},{"location":"tutorial-advanced-topics/","title":"Tutorial advanced topics","text":""},{"location":"tutorial-advanced-topics/#tutorialsadvanced-topicsmd","title":"<code>tutorials/advanced-topics.md</code>","text":"<p>```markdown</p>"},{"location":"tutorial-advanced-topics/#advanced-applications","title":"Advanced Applications","text":"<ul> <li>Voice-controlled movement using AI voice modules</li> <li>ROS2 integration for trajectory planning</li> <li>Web interface control via WiFi</li> <li>Camera-based object tracking</li> </ul>"},{"location":"tutorial-control-basics/","title":"Basic Controls","text":"<p>This tutorial walks through simple position commands for the robotic arm:</p> <p>```cpp moveJoint(1, 90);  // Rotate joint 1 to 90 degrees</p>"},{"location":"tutorials-setup/","title":"Setup &amp; Wiring","text":"<ol> <li>Assemble the arm following the mechanical guide</li> <li>Connect servos to the controller board</li> <li>Flash the firmware using Arduino IDE or PlatformIO</li> <li>Power the system and test communication</li> </ol>"},{"location":"videos/","title":"Videos","text":"<p>Here are links to YouTube videos documenting each project:</p> Project Video Link AI Course (coming soon) Smart Display Device (coming soon) LeRobot Arm (coming soon) Quadruped (coming soon)"},{"location":"projects/ai-course/","title":"AI Course","text":"<p>This course includes:</p> Module Content Basics What is AI, History, Trends Tools Python, Colab, GPT, etc. Examples Prompts, use-cases"},{"location":"projects/lerobot/","title":"LeRobot Arm","text":"<p>Robotic education platform project:</p> Aspect Details Control Master-slave logic, ESP32 control Application Teaching, interactive demos"},{"location":"projects/quadruped/","title":"Quadruped Robot","text":"<p>An experimental AI-assisted walking robot:</p> Module Description Locomotion 4-legged servo structure Brain Microcontroller + IMU Goals Stability, gait learning"},{"location":"projects/quadruped/#gallery","title":"Gallery","text":"Initial Frame Walking Test AI Gait Control"},{"location":"projects/screen-project/","title":"Smart Display Device","text":"<p>A compact hardware device with:</p> Feature Details Screen OLED 1.3'' Brain ESP32 or similar Features Clock, AI message, visual animations"},{"location":"projects/ai-course/coding/","title":"AI Coding Tools","text":"<p>Hands-on with GPT, Copilot, etc.</p>"},{"location":"projects/ai-course/overview/","title":"AI Course Overview","text":"<p>Overview of the full AI curriculum.</p>"},{"location":"projects/ai-course/prompting/","title":"Prompt Engineering","text":"<p>Learn prompt design for LLMs.</p>"},{"location":"projects/lerobot/control/","title":"Control Logic","text":"<p>Master-follower control implementation.</p>"},{"location":"projects/lerobot/setup/","title":"Setup","text":"<p>How to connect servos and calibrate the arm.</p>"},{"location":"projects/lerobot/usecases/","title":"Use Cases","text":"<p>Educational, demo, and extension examples.</p>"},{"location":"projects/quadruped/ai/","title":"AI Integration","text":"<p>Sensors, IMU, and decision logic.</p>"},{"location":"projects/quadruped/frame/","title":"Mechanical Frame","text":"<p>Design of the 4-legged body.</p>"},{"location":"projects/quadruped/motion/","title":"Motion Algorithms","text":"<p>Gait planning and stabilization.</p>"},{"location":"projects/screen-project/build/","title":"Build Steps","text":"<p>Wiring, casing, and assembly guide.</p>"},{"location":"projects/screen-project/cloud-terminal/","title":"Cloud Terminal","text":"<p>Displays messages from cloud-based AI model (via Wi-Fi).</p>"},{"location":"projects/screen-project/code/","title":"Firmware Code","text":"<p>How the display is programmed.</p>"},{"location":"projects/screen-project/design/","title":"Hardware Design","text":"<p>Circuit and component overview.</p>"},{"location":"projects/screen-project/generative-graphics/","title":"Generative Graphics","text":"<p>Fun animated patterns using math + microcontroller graphics.</p>"},{"location":"projects/screen-project/system-monitor/","title":"System Monitor Display","text":"<p>Shows temperature, memory, and CPU usage from a microcontroller.</p>"},{"location":"projects/screen-project/timer/","title":"Pomodoro Timer Project","text":"<p>This project showcases a simple yet effective Pomodoro timer built with an ESP32 microcontroller and an OLED display. It features a rotary encoder for selecting duration, automatic countdown, and buzzer alerts.</p>"},{"location":"projects/screen-project/timer/#hardware-components","title":"\ud83e\uddf0 Hardware Components","text":"<ul> <li>ESP32-C3 SuperMini development board</li> <li>0.91\" I2C OLED display</li> <li>EC11 rotary encoder (with button)</li> <li>Passive buzzer module</li> <li>Breadboard + jumper wires</li> <li>3.7V Li-ion battery + switch module</li> </ul> <p>GPT Prompt for the Code: In this project, we built a Pomodoro timer using an Arduino Nano, a 1.3-inch I2C OLED display (SH1106-based), an EC11 rotary encoder with a push button, and a low-level triggered passive buzzer module.</p> <p>The timer features a scrollable menu interface, allowing users to select from the following options:</p> <p>Pomodoro 10s Pomodoro 15s Pomodoro 20s Pomodoro 25s Info</p> <p>Only four menu items are shown on screen at a time, and the encoder is used to scroll through the options. The selected menu item is highlighted with inverted colors using the U8g2 graphics library, which also handles all display rendering.</p> <p>Pressing the encoder button triggers an action:</p> <p>For Pomodoro options: A countdown begins, displayed in large digits at the center of the screen using a bold font. After the countdown ends, a \u201cDone!\u201d message flashes several times, and the passive buzzer beeps three times.</p> <p>For the \"Info\" option: A brief information page is displayed (e.g., author name and date).</p> <p>All encoder input is handled with digitalRead polling (no interrupts), and the menu scrolls smoothly within the bounds of available options. The buzzer is triggered by sending LOW signals to match its low-level activation design.</p> <p>This compact project demonstrates interactive UI handling, I2C display control, rotary encoder input, and timed output events\u2014all within the Arduino ecosystem.</p>"},{"location":"projects/screen-project/timer/#key-code-snippet","title":"\ud83e\udde0 Key Code Snippet","text":"Click to expand full code <pre><code>#include &lt;U8g2lib.h&gt;\n#include &lt;Wire.h&gt;\n\nU8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0);\n\nconst int CLK = 2;\nconst int DT  = 3;\nconst int SW  = 4;\nconst int buzzerPin = 5; // Buzzer IN\n\nconst int menuCount = 5;\nconst char* menuItems[menuCount] = {\n  \"Pomodoro 10s\", \n  \"Pomodoro 15s\", \n  \"Pomodoro 20s\", \n  \"Pomodoro 25s\", \n  \"Info\"\n};\n\nint menuIndex = 1;\nint lastCLK = HIGH;\n//===========================================================\nvoid setup() {\n  pinMode(CLK, INPUT_PULLUP);\n  pinMode(DT, INPUT_PULLUP);\n  pinMode(SW, INPUT_PULLUP);\n  pinMode(buzzerPin, OUTPUT);\n  digitalWrite(buzzerPin, LOW); // initialized as LOW\n\n  u8g2.begin();\n  drawMenu();\n}\n\nvoid loop() {\n  int currentCLK = digitalRead(CLK);\n  if (currentCLK != lastCLK &amp;&amp; currentCLK == LOW) {\n    if (digitalRead(DT) != currentCLK) {\n      menuIndex++;\n    } else {\n      menuIndex--;\n    }\n    if (menuIndex &lt; 1) menuIndex = 1;\n    if (menuIndex &gt; menuCount) menuIndex = menuCount;\n    drawMenu();\n  }\n  lastCLK = currentCLK;\n\n  if (digitalRead(SW) == LOW) {\n    delay(200);\n    handleSelection(menuIndex);\n    drawMenu();\n  }\n}\n//===========================================================\nvoid drawMenu() {\n  u8g2.clearBuffer();\n  u8g2.setFont(u8g2_font_6x10_tr);\n\n  const int visibleCount = 4;\n  int startIdx = menuIndex - 1;\n  if (startIdx &lt; 1) startIdx = 1;\n  if (startIdx &gt; menuCount - visibleCount + 1)\n    startIdx = menuCount - visibleCount + 1;\n\n  for (int i = 0; i &lt; visibleCount; i++) {\n    int idx = startIdx + i;\n    if (idx &gt; menuCount) break;\n\n    int y = i * 16 + 14;\n    if (idx == menuIndex) {\n      u8g2.drawBox(0, i * 16, 128, 16);\n      u8g2.setDrawColor(0);\n    } else {\n      u8g2.setDrawColor(1);\n    }\n    u8g2.setCursor(10, y);\n    u8g2.print(menuItems[idx - 1]);\n  }\n  u8g2.setDrawColor(1);\n  u8g2.sendBuffer();\n}\n\nvoid handleSelection(int index) {\n  if (index &gt;= 1 &amp;&amp; index &lt;= 4) {\n    int seconds = 5 * index + 5;  // index=1 \u2192 10, 2 \u2192 15 ... 4 \u2192 25\n    for (int i = seconds; i &gt;= 0; i--) {\n      u8g2.clearBuffer();\n      u8g2.setFont(u8g2_font_logisoso32_tr);\n      String s = String(i);\n      int textWidth = u8g2.getStrWidth(s.c_str());\n      u8g2.setCursor((128 - textWidth) / 2, 45);\n      u8g2.print(s);\n      u8g2.sendBuffer();\n      delay(1000);\n    }\n    flashDone();\n\n  } else if (index == 5) {\n    u8g2.clearBuffer();\n    u8g2.setFont(u8g2_font_6x10_tr);\n    u8g2.setCursor(10, 25);\n    u8g2.print(\"Made by Miao\");\n    u8g2.setCursor(10, 40);\n    u8g2.print(\"2025-05-15\");\n    u8g2.sendBuffer();\n    delay(3000);\n  }\n}\n\n// flash finish\nvoid flashDone() {\n  for (int i = 0; i &lt; 4; i++) {\n    u8g2.clearBuffer();\n    u8g2.setFont(u8g2_font_ncenB14_tr);\n    String text = \"Done!\";\n    int w = u8g2.getStrWidth(text.c_str());\n    u8g2.setCursor((128 - w) / 2, 40);\n    u8g2.setDrawColor(1);\n    u8g2.print(text);\n    u8g2.sendBuffer();\n    digitalWrite(buzzerPin, HIGH); // buzzer sound\n    delay(300);\n\n    u8g2.clearBuffer();\n    u8g2.drawBox(0, 0, 128, 64);\n    u8g2.setDrawColor(0);\n    u8g2.setCursor((128 - w) / 2, 40);\n    u8g2.print(text);\n    u8g2.sendBuffer();\n    digitalWrite(buzzerPin, LOW); // buzzer sound\n    delay(300);\n  }\n  u8g2.setDrawColor(1);\n}\n</code></pre> <p>Now, once your code is running, you can replace the handleSelection function to the follow to change the Pomodo time interval.</p> Click to expand full code <pre><code>void handleSelection(int index) {\n  if (index &gt;= 1 &amp;&amp; index &lt;= 4) {\n    int minutes[] = {10, 15, 20, 25};\n    int seconds = minutes[index - 1] * 60; // This 60 is the key for unit change.\n\n    for (int i = seconds; i &gt;= 0; i--) {\n      u8g2.clearBuffer();\n      u8g2.setFont(u8g2_font_logisoso32_tr);\n\n      int min = i / 60;\n      int sec = i % 60;\n      char timeStr[6];\n      sprintf(timeStr, \"%02d:%02d\", min, sec);\n\n      int textWidth = u8g2.getStrWidth(timeStr);\n      u8g2.setCursor((128 - textWidth) / 2, 45);\n      u8g2.print(timeStr);\n      u8g2.sendBuffer();\n      delay(1000);\n    }\n    flashDone();\n    beep3Times();\n  } else if (index == 5) {\n    u8g2.clearBuffer();\n    u8g2.setFont(u8g2_font_6x10_tr);\n    u8g2.setCursor(10, 25);\n    u8g2.print(\"Made by Miao\");\n    u8g2.setCursor(10, 40);\n    u8g2.print(\"2025-05-15\");\n    u8g2.sendBuffer();\n    delay(3000);\n  }\n}\n</code></pre>"},{"location":"projects/screen-project/timer/#video-demonstrations","title":"\ud83c\udfac Video Demonstrations","text":""},{"location":"projects/screen-project/timer/#version-1-basic-functionality-overview","title":"Version 1: Basic Functionality Overview","text":""},{"location":"projects/screen-project/timer/#version-2-rotary-control-buzzer-feedback","title":"Version 2: Rotary Control + Buzzer Feedback","text":""},{"location":"projects/screen-project/voice-animator/","title":"Voice-Responsive Animator","text":"<p>Visual feedback based on sound input or voice commands.</p>"},{"location":"tutorials/ai-course-basic/","title":"Getting Started with AI","text":"<p>This tutorial includes:</p> <ul> <li>How to run AI models in Colab</li> <li>Prompt engineering basics</li> <li>Practical mini-projects</li> </ul>"},{"location":"tutorials/lerobot-setup/","title":"Setting Up LeRobot","text":"<p>Steps:</p> <ol> <li>Wire servos to ESP32</li> <li>Flash firmware</li> <li>Test control signal</li> </ol>"},{"location":"tutorials/screen-howto/","title":"Building the Display Device","text":"<p>Tutorial:</p> <ol> <li>Wiring ESP32 + OLED</li> <li>Display basic text</li> <li>Add animations / sensor input</li> </ol>"}]}